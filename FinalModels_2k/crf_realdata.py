# -*- coding: utf-8 -*-
"""CRF_realData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VWsNOK1__AgtFhOUM_Rp9zNMNoujpjX4
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('ggplot')

pip install -U 'scikit-learn<0.24'

!pip install sklearn-crfsuite

from itertools import chain

import nltk
import sklearn
import scipy.stats
from sklearn.metrics import make_scorer
from sklearn.model_selection import cross_val_score
from nltk.tokenize import word_tokenize

import sklearn_crfsuite
from sklearn_crfsuite import scorers
from sklearn_crfsuite import metrics

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

from google.colab import drive,files
drive.mount("/content/drive")
dataM='/content/drive/My Drive/Colab Notebooks/MODELS/'
filepath = dataM+'CRF.ml'

!cp -rf drive/MyDrive/job_20k.json /content/

import pandas as pd
import json
path_to_json = 'job_20k.json'
df  = pd.read_json(path_to_json,lines=True)
df.head().T

df['clean_descrition'] = df['clean_descrition'].str.replace(r'[^\w\s]+', ' ')
df['clean_descrition'] = df['clean_descrition'].apply(lambda x: ' '.join(x.split()[:128]))
df['clean_descrition'][1]

jobs = list(df.clean_descrition)
def convert_to_list_then_dict(df_column= None, key_value=str):
    value_list = list(df_column)
    _ = list(set([item for value_list in value_list for item in value_list]))
    return dict.fromkeys(_, key_value)

org = convert_to_list_then_dict(df_column=df.organization_list, key_value='C')
skill = convert_to_list_then_dict(df_column=df.skill_list, key_value='S')
job = convert_to_list_then_dict(df_column=df.job_title_list, key_value='J')

XTr= jobs[:1500]
XVal= jobs[1500:2000]
org_b = org
skills_b = skill
jobs_b = job

def make(X,org_b,skills_b,jobs_b):
  big=[]
  for sentence in X:
    token=word_tokenize(sentence)
    small=[]
    token_t=nltk.pos_tag(token)
    for f,s in token_t:
      tag='O'
      if f.lower() in org_b:
        tag=org_b[f.lower()]
      if f.lower() in skills_b:
        tag=skills_b[f.lower()]
      if f.lower() in jobs_b:
        tag=jobs_b[f.lower()]
      small.append((f,s,tag))
    big.append(small)
  return big
XTr_=make(XTr,org_b,skills_b,jobs_b)
XVal_=make(XVal,org_b,skills_b,jobs_b)

def getfeatures(dat,i):
  word=dat[i][0]
  postag=dat[i][1]
  features = {
        'bias': 1.0,
        'word.lower()': word.lower(),
        'word[-3:]': word[-3:],
        'word[-2:]': word[-2:],
        'word.isupper()': word.isupper(),
        'word.istitle()': word.istitle(),
        'word.isdigit()': word.isdigit(),
        'postag': postag,
        'postag[:2]': postag[:2],
  }
  if i>0:
    word=dat[i-1][0]
    postag=dat[i-1][1]
    features.update({
        '-1:word.lower()': word.lower(),    
        '-1:word.isupper()': word.isupper(),
        '-1:word.istitle()': word.istitle(),
        '-1:postag': postag,
        '-1:postag[:2]': postag[:2]
    })
  else:
    features['BOS']=True
  if i+1<len(dat):
    word=dat[i+1][0]
    postag=dat[i+1][1]
    features.update({
        '+1:word.lower()': word.lower(),    
        '+1:word.isupper()': word.isupper(),
        '+1:word.istitle()': word.istitle(),
        '+1:postag': postag,
        '+1:postag[:2]': postag[:2]
    })
  else:
    features['EOS']=True
  return features

def f2features(dat):
    return [getfeatures(dat, i) for i in range(len(dat))]

def f2labels(dat):
    return [label for token, postag, label in dat]

def f2tokens(dat):
    return [token for token, postag, label in dat]

XTr__=[f2features(x) for x in XTr_]
YTr__=[f2labels(x) for x in XTr_]

XVal__=[f2features(x) for x in XVal_]
YVal__=[f2labels(x) for x in XVal_]

crf = sklearn_crfsuite.CRF(
    algorithm='lbfgs',
    c1=0.1,
    c2=0.1,
    max_iterations=100,
    all_possible_transitions=True
)

crf.fit(XTr__, YTr__)

labls=crf.classes_

y_pred = crf.predict(XVal__)
metrics.flat_f1_score(YVal__, y_pred,average='weighted', labels=labls)

print(metrics.flat_classification_report(YVal__, y_pred,digits=3))

print(y_pred[:10])

